1)Для установки .net core 6.0
wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.deb

2)Установка пакета SDK
sudo apt-get update; \
  sudo apt-get install -y apt-transport-https && \
  sudo apt-get update && \
  sudo apt-get install -y dotnet-sdk-6.0

3)Установка среды выполнения ASP.NET Core
sudo apt-get update; \
  sudo apt-get install -y apt-transport-https && \
  sudo apt-get update && \
  sudo apt-get install -y aspnetcore-runtime-6.0 (sudo apt-get install -y dotnet-runtime-6.0 для dotnet)

4)Установить git командой
sudo apt-get install git

5)Создаем директорию под проект
sudo mkdir OS
(проверяем ls)

6)Переходим в неё 
cd OS

7)Клонировать проект с репозитория
sudo git init
Подключаемся к удаленному репозиторию:
sudo git remote add master https://github.com/maksimkayun/AnimalsAndAreals.git
Скачиваем проект командой:
sudo git pull https://github.com/maksimkayun/AnimalsAndAreals.git master

	7.1)
	если что-то не так, то переходим в Home командой cd и удаляем нахуй папку с проектом командой sudo rm -rf app, 
	возвращаемся в п.5

8)Собрать проект командой:
sudo dotnet build OS

9)Переходим в папку проекта и запускаем проект
cd OS
sudo dotnet run OS

10) Работает? Тогда Ctrl + Z, иначе см. пункт 7.1)

11) sudo apt-get install nginx (устанавливаем nginx)
12) Стартуем сервис 
sudo service nginx start
Проверяем, работает ли: systemctl status nginx

13) Готовим папку для релиза
cd /var/www
sudo mkdir OS
Меняем права
sudo chown username OS (проверяем ls -all)

14) Публикация
Переходим в папку с проектом
cd
cd OS
cd OS
dotnet publish -c Release -o /var/www/OS

15) Для настройки демона systemd
cd /etc/systemd/system
sudo touch kestrel-OS.service
sudo nano kestrel-OS.service

вносим в него 
[Unit]
Description=Example .NET Web API App running on Ubuntu

[Service]
WorkingDirectory=/var/www/OS
ExecStart=/usr/bin/dotnet /var/www/OS/Test.dll
SyslogIdentifier=kestrel-OS
User=dima
Environment=ASPNETCORE_ENVIRONMENT=Development
Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

[Install]
WantedBy=multi-user.target




Сохраняем и включаем службу

16)Включаем службу
sudo systemctl enable kestrel-OS.service

Запустите службу и убедитесь, что она работает
sudo systemctl start kestrel-OS.service
Проверяем systemctl status kestrel-OS.service

sudo systemctl daemon-reload
sudo systemctl start kestrel-OS

Чтобы настроить Nginx как обратный прокси-сервер для перенаправления HTTP-запросов в ваше приложение ASP.NET Core, 
измените файл /etc/nginx/sites-available/default. 
Откройте этот файл в текстовом редакторе и замените его содержимое на следующий фрагмент кода:


server {
    listen        80;
    server_name   dima;
    location / {
        proxy_pass         http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }
}


// для справки
sudo apt-get install ufw
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

sudo ufw enable
sudo ln -s /etc/nginx/sites-available/aspnetcore.conf /etc/nginx/sites-enabled/aspnetcore.conf


sudo ufw allow 'Nginx Full'
sudo ufw delete allow 'Nginx HTTP'

!!! ИМЯ СЕРВЕРА - см в папке /etc/nginx/nginx.conf
после его изменений обязательно нужно выполнить команды
sudo nginx -t
// проверяем нет ли ошибок, если есть - ИСПРАВЛЯЕМ и заново
sudo nginx -s reload
sudo systemctl restart nginx.service
